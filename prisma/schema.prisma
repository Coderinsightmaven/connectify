// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================================================

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  emailVerified  Boolean  @default(false)
  username       String?  @unique
  name           String?
  avatar         String?
  bio            String?
  location       String?
  website        String?
  isVerified     Boolean  @default(false)
  followerCount  Int      @default(0)
  followingCount Int      @default(0)
  postCount      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  bookmarks    Bookmark[]
  shares       Share[]
  followers    Follow[]      @relation("UserFollowers")
  following    Follow[]      @relation("UserFollowing")
  reports      Report[]      @relation("ReportedUser")
  reportsMade  Report[]      @relation("ReporterUser")
  chatMessages ChatMessage[]
  userSettings UserSettings?

  image String?

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// SOCIAL FEATURES
// ============================================================================

model Post {
  id             String   @id @default(cuid())
  content        String
  images         Json? // Array of image URLs
  authorId       String
  likesCount     Int      @default(0)
  commentsCount  Int      @default(0)
  sharesCount    Int      @default(0)
  bookmarksCount Int      @default(0)
  published      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  shares    Share[]
  hashtags  PostHashtag[]

  @@map("posts")
}

model Comment {
  id              String   @id @default(cuid())
  content         String
  postId          String
  authorId        String
  parentCommentId String? // For nested comments
  likesCount      Int      @default(0)
  repliesCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  likes         Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Share {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("shares")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// ============================================================================
// HASHTAGS & TRENDING
// ============================================================================

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  postCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostHashtag[]

  @@map("hashtags")
}

model PostHashtag {
  id        String @id @default(cuid())
  postId    String
  hashtagId String

  // Relations
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([postId, hashtagId])
  @@map("post_hashtags")
}

// ============================================================================
// VIDEO CHAT SYSTEM
// ============================================================================

model VideoChatSession {
  id           String    @id @default(cuid())
  sessionId    String    @unique
  participants Json // Array of participant data
  isActive     Boolean   @default(true)
  reportCount  Int       @default(0)
  createdAt    DateTime  @default(now())
  endedAt      DateTime?

  // Relations
  messages ChatMessage[]

  @@map("video_chat_sessions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  senderId  String // Anonymous sender ID
  content   String
  createdAt DateTime @default(now())

  // Relations
  session VideoChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender  User             @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// ============================================================================
// USER SETTINGS & PREFERENCES
// ============================================================================

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  theme               String   @default("system") // light, dark, system
  fontSize            String   @default("medium") // small, medium, large
  reducedMotion       Boolean  @default(false)
  highContrast        Boolean  @default(false)
  // Notification settings
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(true)
  newFollowers        Boolean  @default(true)
  postLikes           Boolean  @default(true)
  postComments        Boolean  @default(true)
  mentions            Boolean  @default(true)
  // Privacy settings
  profileVisibility   String   @default("public") // public, followers, private
  allowDirectMessages Boolean  @default(true)
  showOnlineStatus    Boolean  @default(true)
  allowTagging        Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ============================================================================
// MODERATION & REPORTING
// ============================================================================

model Report {
  id             String   @id @default(cuid())
  reporterId     String
  reportedUserId String?
  postId         String?
  commentId      String?
  reason         String
  description    String?
  status         String   @default("pending") // pending, reviewed, resolved, dismissed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  reporter     User  @relation("ReporterUser", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser User? @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
